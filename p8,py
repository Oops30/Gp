import numpy as np
import pandas as pd
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Diabetes dataset and preprocess
print("T084 NIKITA HIRAP")
diabetes = load_diabetes()
X = diabetes.data
y = (diabetes.target > diabetes.target.mean()).astype(int)
scaler = StandardScaler()
X = scaler.fit_transform(X)

# PCA for visualization
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
df_pca = pd.DataFrame(X_pca, columns=['PCA1', 'PCA2'])
df_pca['target'] = y
sns.scatterplot(x='PCA1', y='PCA2', hue='target', data=df_pca, palette='Set1')
plt.title('Diabetes Dataset Visualization')
plt.show()

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# K-NN for different k-values
k_values = [2, 5, 7, 9]
for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    print(f'\nAccuracy for k={k}: {accuracy_score(y_test, y_pred):.2f}')
    print(classification_report(y_test, y_pred))

    # Confusion matrix
    conf_matrix = confusion_matrix(y_test, y_pred)
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix for k={k}')
    plt.show()

# Plotting error rate vs. k values using cross-validation
neighbors = np.arange(1, 21)
cv_scores = [cross_val_score(KNeighborsClassifier(n_neighbors=k), X_train, y_train, cv=10).mean() for k in neighbors]
plt.plot(neighbors, 1 - np.array(cv_scores), marker='o', linestyle='--', color='b')
plt.title('Error Rate vs. K Value')
plt.xlabel('Number of Neighbors K')
plt.ylabel('Error Rate')
plt.grid()
plt.show()

# Plot accuracy vs. k values
accuracy_scores = [accuracy_score(y_test, KNeighborsClassifier(n_neighbors=k).fit(X_train, y_train).predict(X_test)) for k in neighbors]
plt.plot(neighbors, accuracy_scores, marker='o', linestyle='-', color='b', label='Accuracy')
plt.title('Accuracy vs. Number of Neighbors (k)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.xticks(neighbors)
plt.grid(True)
plt.legend()
plt.show()
